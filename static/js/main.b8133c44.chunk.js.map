{"version":3,"sources":["Components/ScienceLab/index.tsx","Components/Beaker/index.tsx","Hooks/useInterval.tsx","App.tsx","serviceWorker.js","index.js"],"names":["ScienceLab","className","Beaker","React","useState","x","y","defaultPos","deltaPosition","setDeltaPosition","falling","setFalling","position","setPosition","rotation","setRotation","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","defaultPosition","onDrag","e","ui","deltaX","deltaY","onStop","currentPos","style","transform","lightTheme","darkTheme","App","currentTheme","setTheme","theme","key","value","document","documentElement","setProperty","onClick","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2QAMeA,G,MAJI,WACf,OAAO,yBAAKC,UAAU,gB,+BCG1B,IAyDeC,EAzDA,WAAO,IAAD,EACIC,IAAMC,SAAS,CAACC,EAAG,IAAKC,EAAG,MAAzCC,EADU,sBAEyBJ,IAAMC,SAAS,CAACC,EAAG,EAAGC,EAAE,IAFjD,mBAEVE,EAFU,KAEKC,EAFL,OAGaN,IAAMC,UAAS,GAH5B,mBAGVM,EAHU,KAGDC,EAHC,OAIeR,IAAMC,SAASG,GAJ9B,mBAIVK,EAJU,KAIAC,EAJA,OAKeV,IAAMC,SAAS,GAL9B,mBAKVU,EALU,KAKAC,EALA,KA6CjB,OCjDW,SAAqBC,EAAeC,GACjD,IAAMC,EAAgBC,iBAAOH,GAG7BI,qBAAU,WACRF,EAAcG,QAAUL,IACvB,CAACA,IAGJI,qBAAU,WAIR,GAAc,OAAVH,EAAgB,CAClB,IAAIK,EAAKC,aAJX,WACEL,EAAcG,YAGaJ,GAC3B,OAAO,kBAAMO,cAAcF,OAE5B,CAACL,ID8BFQ,EAlBqB,WACdf,IACCG,EAAY,eAAID,EAAL,CAAeN,EAAGM,EAASN,EAAI,OAC1CS,EAAY,IAGTH,EAASN,EAAI,MAEZG,EAAiB,eAAID,EAAL,CAAoBF,EAAE,KACtCK,GAAW,OASID,EAAW,GAAK,MAGvC,kBAAC,IAAD,CAAWgB,gBAAiBnB,EAAaK,SAAUA,EAAUe,OAP9C,SAACC,EAAQC,GACxBpB,EAAiB,CAACJ,EAAIG,EAAcH,EAAIwB,EAAGC,OAASxB,EAAIE,EAAcF,EAAIuB,EAAGE,UAMIC,OA9BlE,WACf,IAAMC,EAAa,CAAC5B,EAAGG,EAAcH,EAAIE,EAAWF,EAAGC,EAAGE,EAAcF,EAAIC,EAAWD,GAGvFO,EAAYoB,GACZtB,GAAW,KA0BP,yBAAKV,UAAU,oBACX,yBAAMA,UAAU,mBAAmBiC,MAAO,CAACC,UAAU,UAAD,OAAYrB,EAAZ,UACpD,yBAAKb,UAAU,eEjDzBmC,EAAa,CACf,gBAAiB,QACjB,kBAAmB,QACnB,kBAAmB,QAEjBC,EAAuC,CACzC,gBAAiB,QACjB,kBAAmB,QACnB,kBAAmB,UA8BRC,EA3BH,WAAO,IAAD,EACmBnC,IAAMC,SAAS,SADlC,mBACPmC,EADO,KACOC,EADP,KAGdrC,IAAMiB,WAAU,WAEZ,IAAMqB,EAAyB,UAAjBF,EAA2BH,EAAaC,EACtD,IAAK,IAAIK,KAAOD,EAAO,CACnB,IAAME,EAAaF,EAAMC,GACzBE,SAASC,gBAAgBX,MAAMY,YAAYJ,EAAKC,MAErD,CAACJ,IAOJ,OACI,6BACI,4BAAsB,UAAjBA,EAA2B,cAAgB,cAChD,4BAAQQ,QARA,WAEZP,EADmC,UAAjBD,EAA2B,OAAS,WAOlD,gBACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QC3BQS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASV,SAASW,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b8133c44.chunk.js","sourcesContent":["import React from \"react\";\n\nconst ScienceLab = () => {\n    return <div className=\"lab-bench\" />;\n};\n\nexport default ScienceLab;\n","import React from 'react';\nimport './styles.css';\nimport Draggable from 'react-draggable';\nimport useInterval from '../../Hooks/useInterval';\n\n\nconst Beaker = () => {\n    const [defaultPos] = React.useState({x: 100, y: 220});\n    const [deltaPosition, setDeltaPosition] = React.useState({x: 0, y:0});\n    const [falling, setFalling] = React.useState(false);\n    const [position, setPosition] = React.useState(defaultPos);\n    const [rotation, setRotation] = React.useState(0);\n\n    // React.useEffect(() => {\n        \n    //     setBeaker(document.getElementById('special-beaker'));\n\n    //     return () => {\n    //       //cleanup  \n    //     };\n    // }, []);\n    \n    const handleStop = () => {\n        const currentPos = {x: deltaPosition.x + defaultPos.x, y: deltaPosition.y + defaultPos.y};\n        \n   \n        setPosition(currentPos);\n        setFalling(true);\n        \n    }\n\n    const applyGravity = () => {\n        if(falling){\n            setPosition({...position, y: position.y + 9.8});\n            setRotation(45);\n\n            //acts as floor, preventing falling through lab table\n            if(position.y > 200){\n                //resets height delta to 0\n                setDeltaPosition({...deltaPosition, y:0})\n                setFalling(false);\n            }\n        }\n    }\n\n    const handleDrag = (e: any, ui: any) => {\n        setDeltaPosition({x: (deltaPosition.x + ui.deltaX), y: (deltaPosition.y + ui.deltaY)} );\n    }\n\n    useInterval(applyGravity, (falling) ? 10 : null);\n\n    return (\n        <Draggable defaultPosition={defaultPos}  position={position} onDrag={handleDrag} onStop={handleStop}>\n            <div className=\"beaker-container\">\n                <div  className=\"beaker-container\" style={{transform: `rotate(${rotation}deg)`}} >\n                <div className=\"beaker\"></div>\n                </div>\n                \n            </div>\n        </Draggable>\n    )\n}\n\nexport default Beaker;","import { useEffect, useRef } from 'react';\n\nexport default function useInterval(callback: any, delay: any) {\n  const savedCallback = useRef(callback);\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\n\n","import React from \"react\";\n\nimport \"./App.css\";\nimport ScienceLab from \"./Components/ScienceLab\";\nimport Beaker from \"./Components/Beaker\";\n\nconst lightTheme = {\n    \"--color-solid\": \"black\",\n    \"--color-surface\": \"white\",\n    \"--color-primary\": \"teal\",\n};\nconst darkTheme: { [key: string]: string } = {\n    \"--color-solid\": \"white\",\n    \"--color-surface\": \"black\",\n    \"--color-primary\": \"purple\",\n};\n\nconst App = () => {\n    const [currentTheme, setTheme] = React.useState(\"light\");\n\n    React.useEffect(() => {\n        //changes theme by setting css vars from light to dark\n        const theme = currentTheme === \"light\" ? lightTheme : darkTheme;\n        for (var key in theme) {\n            const value: any = theme[key] as any;\n            document.documentElement.style.setProperty(key, value);\n        }\n    }, [currentTheme]);\n\n    const onClick = () => {\n        const nextTheme = currentTheme === \"light\" ? \"dark\" : \"light\";\n        setTheme(nextTheme);\n    };\n\n    return (\n        <div>\n            <h1>{currentTheme === \"light\" ? \"Light theme\" : \"Dark theme\"}</h1>\n            <button onClick={onClick}>Toggle theme</button>\n            <Beaker />\n            <ScienceLab></ScienceLab>\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}